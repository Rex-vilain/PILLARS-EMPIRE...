# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cfFz-S65U2xqIcxruvfWIlVwp0ukOxY7
"""


import pandas as pd
from datetime import datetime
import streamlit as st
import pandas as pd
from datetime import datetime

st.set_page_config(layout="wide")
st.title("Pillars Bar & Restaurant Stock Sheet")


st.sidebar.title("User Login")
username = st.sidebar.text_input("Enter your name", max_chars=30)
if not username:
    st.warning("Please enter your name to proceed.")
    st.stop()

today = datetime.now().strftime("%Y-%m-%d")
st.sidebar.markdown(f"*Logged in as:* {username}")
st.sidebar.markdown(f"*Date:* {today}")



new_entry = {
    "Date": datetime.now().strftime("%Y-%m-%d"),
    "Sales": 4100,
    "Accommodation": 1200,
    "Chama": 300,
    "Expenses": 800,
    "Boss Cash": 1000,
    "Balance": 3600
}


df_new = pd.DataFrame([new_entry])


csv_file = "records.csv"

try:
    df_existing = pd.read_csv(csv_file)
    df_all = pd.concat([df_existing, df_new], ignore_index=True)
except FileNotFoundError:
    df_all = df_new


df_all.to_csv(csv_file, index=False)

print("‚úÖ Entry saved to records.csv")

import streamlit as st
import pandas as pd
import os
import os
from datetime import datetime

st.set_page_config(layout="wide")
st.title("Pillars Bar & Restaurant Stock Sheet")


items = [
    "TUSKER", "PILISNER", "TUSKER MALT", "TUSKER LITE", "GUINESS KUBWA", "GUINESS SMALL", "BALOZI CAN", "WHITE CAP",
    "BALOZI", "SMIRNOFF ICE", "SAVANNAH", "SNAPP", "TUSKER CIDER", "KING FISHER", "ALLSOPPS", "G.K CAN", "T.LITE CAN",
    "GUARANA", "REDBULL", "RICHOT ¬æ", "RICHOT ¬º", "VICEROY ¬º", "VICEROY 1/4", "VODKA ¬º", "VODKA 1/4", "KENYA CANE ¬æ",
    "KENYA CANE ¬º", "KENYA CANE 1/4", "GILBEYS ¬Ω", "GILBEYS 1/4", "V&A 750 ML", "CHROME", "TRIPLE ACE", "BLACKS & WHITE",
    "KIBAO ¬Ω", "KIBAO 1/4", "HUNTERS ¬º", "HUNTERS 1/4", "CAPTAIN MORGAN", "KONYAGI", "V & A", "COUNTY", "BEST 750 ML",
    "WATER 1 L", "WATER ¬Ω", "LEMONADE", "CAPRICE", "FAXE", "C. MORGAN", "VAT 69", "SODA 300 ML", "SODA 600 ML",
    "BLACK & WHITE", "BEST", "CHROME 750 ML", "MANGO", "TRUST", "PUNCH", "VODKA 750 ML", "KONYAGI 500 ML", "GILBEYS 750 ML"
]


CSV_FILE = "stock_data.csv"


def load_data():
    if os.path.exists(CSV_FILE):
        return pd.read_csv(CSV_FILE)
    else:
        # Create initial DataFrame if no file
        df = pd.DataFrame({
            "Item": items,
            "Opening Stock": 0,
            "Purchase": 0,
            "Closing Stock": 0,
            "Sales": 0,
            "Selling Price": 0.0,
        })
        df["Amount"] = df["Sales"] * df["Selling Price"]
        return df


df = load_data()


edited = st.data_editor(df, use_container_width=True, num_rows="dynamic")


total_sales = (edited["Sales"] * edited["Selling Price"]).sum()
accommodation = st.number_input("Accommodation (Ksh)", 0)
chama = st.number_input("Chama (Ksh)", 0)
expenses = st.number_input("Expenses (Ksh)", 0)
to_boss = st.number_input("Cash to Boss (Ksh)", 0)
total_income = total_sales + accommodation + chama
profit = total_income - (expenses + to_boss)


if not os.path.exists("data_logs"):
    os.makedirs("data_logs")
date_filter = st.date_input("üìÖ Filter by Date")
selected_log = f"{date_filter}_stock.csv"
log_path = f"data_logs/{selected_log}"

if os.path.exists(log_path):
    df_log = pd.read_csv(log_path)
    st.dataframe(df_log)
else:
    st.warning("No data found for that date.")



today = datetime.now().strftime("%Y-%m-%d")
filename = f"data_logs/{today}.csv"


edited["Amount"] = edited["Sales"] * edited["Selling Price"]
edited.to_csv(filename, index=False)


with open(filename, "rb") as f:
    st.download_button(
        label="Download Today's Stock Data",
        data=f,
        file_name=f"{today}_stock.csv",
        mime="text/csv"
    )
st.subheader("üìÅ View Saved Records")
log_files = sorted(os.listdir("data_logs"))

selected_log = st.selectbox("Select a Date to View Records", log_files)
if selected_log:
    df_log = pd.read_csv(f"data_logs/{selected_log}")
    st.dataframe(df_log, use_container_width=True)

st.subheader("üìâ Expenses Breakdown")

expenses_data = {
    "Accommodation": accommodation,
    "Chama": chama,
    "Expenses": expenses,
    "Cash to Boss": to_boss
}

fig2, ax2 = plt.subplots()
ax2.pie(expenses_data.values(), labels=expenses_data.keys(), autopct='%1.1f%%', startangle=140)
ax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

st.pyplot(fig2)
import streamlit as st
import pandas as pd

Assuming you already have these variables calculated somewhere above:
total_sales, accommodation, chama, expenses, to_boss, profit

summary_data = {
    "Category": ["Total Sales", "Accommodation", "Chama", "Expenses", "Cash to Boss", "Profit"],
    "Amount (Ksh)": [
        total_sales,
        accommodation,
        chama,
        expenses,
        to_boss,
        profit
    ]
}

summary_df = pd.DataFrame(summary_data)

st.subheader("Daily Summary Table")
st.table(summary_df)

summary_data = {
    "Total Sales": [total_sales],
    "Accommodation": [accommodation],
    "Chama": [chama],
    "Expenses": [expenses],
    "To Boss": [to_boss],
    "Profit": [profit]
}

edited["Amount"] = edited["Sales"] * edited["Selling Price"]


summary_df = pd.DataFrame({
    "Item": ["", "", "", "", "", "SUMMARY ‚Üì", "Total Sales", "Accommodation", "Chama", "Expenses", "To Boss", "Profit"],
    "Amount": ["", "", "", "", "", "", total_sales, accommodation, chama, expenses, to_boss, profit]
})


final_df = pd.concat([edited, summary_df], ignore_index=True)


final_df.to_csv("stock_sheet_summary.csv", index=False)


csv = summary_df.to_csv(index=False).encode('utf-8')
import matplotlib.pyplot as plt

st.subheader("üìä Sales Summary Chart")

Bar Chart of Sales per Item
fig, ax = plt.subplots()
edited_grouped = edited.groupby("Item")["Sales"].sum()
ax.bar(edited_grouped.index, edited_grouped.values)
ax.set_xlabel("Item")
ax.set_ylabel("Total Sales")
ax.set_title("Sales per Item")
plt.xticks(rotation=45)

st.pyplot(fig)

st.download_button(
    label="üìò Download Stock Summary",
    data=csv,
    file_name='stock_summary.csv',
    mime='text/csv',
)

col1, col2 = st.columns(2)
with col1:
    st.metric("Total Sales", f"Ksh {total_sales:,.2f}")
    st.metric("Accommodation", f"Ksh {accommodation:,.2f}")
    st.metric("Chama", f"Ksh {chama:,.2f}")
with col2:
    st.metric("Expenses", f"Ksh {expenses:,.2f}")
    st.metric("To Boss", f"Ksh {to_boss:,.2f}")
    st.metric("Profit", f"Ksh {profit:,.2f}")

df["Recorded By"] = username
df["Date"] = today


if st.button("Save Data"):
    edited["Amount"] = edited["Sales"] * edited["Selling Price"]
    search_query = st.text_input("üîç Search Item")
if search_query:
    filtered_df = edited[edited['Item'].str.contains(search_query, case=False)]
    st.dataframe(filtered_df)
else:
    st.dataframe(edited)
    edited.to_csv(CSV_FILE, index=False)
    st.success(f"Data saved to {CSV_FILE}!")


st.download_button(
    label="Download CSV",
    data=edited.to_csv(index=False),
    file_name="daily_stock_data.csv",
    mime="text/csv"
)


